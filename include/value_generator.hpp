#ifndef __VALUE_GENERATOR_HPP__
#define __VALUE_GENERATOR_HPP__

#include <cstdint>
#include "third_party/foedus/uniform_random.hpp"

namespace PiBench
{

class value_generator_t
{
public:
    /**
     * @brief Construct a new value_generator_t object.
     *
     * @param size size in Bytes of generated values.
     */
    value_generator_t(const uint32_t size)
        : size_(size)
    {
    }

    /**
     * @brief Returns a pointer to beginning of value.
     *
     * The pointer points to a random position in VALUE_POOL.
     *
     * @return const char*
     */
    const char* next()
    {
        auto pos = rng_.uniform_within(0, sizeof(VALUE_POOL) - size_);
        return &VALUE_POOL[pos];
    }


    /**
     * @brief Returns a pointer to beginning of value.
     *
     * The pointer points to a hashed representation of the provided key.
     *
     * @return const char*
     */
    const char* from_key(uint64_t key);

    /**
     * @brief Get size in Bytes of values generated.
     *
     * @return uint32_t
     */
    uint32_t size() const noexcept
    {
        return size_;
    }

    /**
     * @brief Set the seed object.
     *
     * @param seed
     */
    static void set_seed(uint32_t seed)
    {
        rng_.set_current_seed(seed);
    }

    /**
     * @brief Get the seed object.
     *
     * @return uint32_t
     */
    static uint32_t get_seed() noexcept { return rng_.get_current_seed(); }

    /// Maximum size in Bytes of supported.
    static constexpr uint32_t VALUE_MAX = 1400;

    static constexpr uint32_t KEY_MAX = 128;

private:
    /// Size in bytes of values generated by this object.
    uint32_t size_;

    /// Engine used for generating a random start position in VALUE_POOL.
    static thread_local foedus::assorted::UniformRandom rng_;

    /// Space to materialize the hashed keys (avoid allocation).
    static thread_local char buf_[KEY_MAX];

    /// Pool of random bytes used to generate values.
    static constexpr char VALUE_POOL[] =
        "NvhE8N7yR26f4bbpMJnUKgHncH6QbsI10HyxlvYHKFiMk5nPNDbueF2xKLzteSd0NazU2APkJWXvBW2oUu8dkZnWMMu37G8TH2qm"
        "S0c8A9z41pxrC6ZU79OnfCZ06DsNXWY3U4dt1JTGQVvylBdZSlHWXC4PokCxsMdjv8xRptFMMQyHZRqMhNDnrsGKA12DEr7Zur0n"
        "tZpsyreMmPwuw7WMRnoN5wAYWtkqDwXyQlYb4RgtSc4xsonpTx2UhIUi15oJTx1CXAhmECacCQfntFnrSZt5qs1L64eeJ9Utus0N"
        "mKgEFV8qYDsNtJ21TkjCyCDhVIATkEugCw1BfNIB9AZDGiqXc0llp4rlJPl4bIG2QC4La3M1oh3yGlZTmdvN5pj1sIGkolpdoYVJ"
        "0NZM9KAo1d5sGFv9yGC7X0CTDOqyRu5c4NPktU70NbKqWNXa1kcaigIfeAuvJBs0Wso2osHzOjrbawgpfBPs1ePaWHgw7vbOcu9v"
        "Cqz1GnmdQw4mGSo4cc6tebQuKqLkQHuXa1MdRmzinBRoGQBQehqrDmmfNhcxfozcU7hOTjFAjryJ4HdSK57gOlrte5sZlvDW9rFd"
        "4OxG6WtFdZomRQPTNc4D9t7smqBR9EYDSjiAAqmIgZUiycHrlv6JQzEiexjqfGUbo8oJV6wiu7l3Jlfb94uByDxoexkMT5AjJzls"
        "er1dc9EfQz88q5Hv00g53Q3H6jcgicoY8YW5K4josd2e53ikesQi2kzqvTI9xxM5wtFexkFm8wFdMs6YmNpvNgTf37Hz204wX1Sf"
        "djFmCYEcP533LYcGB7CslEVMPYRZXHBT98XKtt8RqES7HBW65xSJRSj3qhIDUsgeu2Flo4YqS68QoE69JzyBnwmmYw6uulVLVIAe"
        "iLl49oUhEiEjem8RrHPpEvrUoLDWwMdh14MfxwmEQbtGnUHEpRktUB6b7JTJN8OHBlLrvr71TkRK728ZgRv32rMZJ46O17qHTYc4"
        "AepNCGbpTII0J05OYiush6hiDo6H5pVHVUWy3nm7BBrBzEHVOCBMHNniw4CIzfavGLaUfgjlBg0D4JBmYmkg0A4maCXsE9QTnGbA"
        "fQErGZkdMnRxXJ5EJ627e7zuFuVtazb0L65B3nU5R9tyUl2bTZiDcakK9evrTXoTkbkGjkCOiMSThGFScb6Lsgvl5wNCzlUZCxof"
        "jYQCLusRkXEm0CNVuifTnytctwLfKjwob4hJ0WxlQN9FV9Mm9zT61EQ8zEMrqr6hf7XMqhcQR7DWAaf1fM4oNLIA7ZdKaspUaU6h"
        "oP2w3t3MktVaBp6MgS6Apbkb7EsihETHHqKFkKMCkYBbKfgsq7Jy49T1Wx2UJsD3XX03kVBbqRWmryYoMIqiCTCTqa0jIKzqQEnN";
};
} // namespace PiBench
#endif